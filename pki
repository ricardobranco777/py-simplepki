#!/usr/bin/env python3
"""
PKI for test
"""

import ipaddress
import sys
from collections import namedtuple
from datetime import datetime, timedelta

from cryptography import x509
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes, serialization
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.x509.oid import NameOID

Cert = namedtuple("Cert", ["cert", "key"])


def get_key(key_size=4096):
    """
    Get random key
    """
    return rsa.generate_private_key(
        public_exponent=65537,
        key_size=key_size,
        backend=default_backend()
    )


def write_private_key(name, key, passphrase=None):
    """
    Write key, optionally encrypted with passphrase
    """
    if passphrase is not None:
        passphrase = bytes(passphrase, encoding="utf-8")
        algorithm = serialization.BestAvailableEncryption(passphrase)
    else:
        algorithm = serialization.NoEncryption()
    with open("%s.key" % name, "wb") as file:
        file.write(key.private_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PrivateFormat.TraditionalOpenSSL,
            encryption_algorithm=algorithm)
        )


def write_certificate(name, certificate, append=False):
    """
    Write certificate
    """
    mode = "ab" if append else "wb"
    with open("%s.pem" % name, mode) as file:
        file.write(certificate.public_bytes(
            encoding=serialization.Encoding.PEM,
        ))


def generate_ca(name, ca=None, pathlen=0):  # pylint: disable=invalid-name
    """
    Generate CA
    """
    subject = x509.Name([
        x509.NameAttribute(NameOID.COMMON_NAME, name),
    ])
    if ca is not None:
        issuer = ca.cert.subject
        ca_key = ca.key
        key = get_key()
    else:
        # Self-signed certificate
        key = ca_key = get_key()
        issuer = subject
    cert = x509.CertificateBuilder().subject_name(
        subject
    ).issuer_name(
        issuer
    ).public_key(
        key.public_key()
    ).serial_number(
        x509.random_serial_number()
    ).not_valid_before(
        datetime.utcnow() - timedelta(days=1)
    ).not_valid_after(
        datetime.utcnow() + timedelta(days=3)
    ).add_extension(
        x509.BasicConstraints(ca=True, path_length=pathlen),
        critical=True,
    ).sign(
        private_key=ca_key,
        algorithm=hashes.SHA512(),
        backend=default_backend()
    )
    return Cert(cert, key)


def generate_cert(name, ca, client=False, ip_v4=None, ip_v6=None):  # pylint: disable=invalid-name
    """
    Generate client/server key & certificate
    """
    if client:
        auth = x509.ExtendedKeyUsageOID.CLIENT_AUTH
    else:
        auth = x509.ExtendedKeyUsageOID.SERVER_AUTH
    subject = x509.Name([
        x509.NameAttribute(NameOID.COMMON_NAME, name),
    ])
    subject_altnames = [x509.DNSName(name)]
    if ip_v4:
        subject_altnames.append(x509.IPAddress(ipaddress.IPv4Address(ip_v4)))
    if ip_v6:
        subject_altnames.append(x509.IPAddress(ipaddress.IPv6Address(ip_v6)))
    key = get_key()
    cert = x509.CertificateBuilder().subject_name(
        subject
    ).issuer_name(
        ca.cert.subject
    ).public_key(
        key.public_key()
    ).serial_number(
        x509.random_serial_number()
    ).not_valid_before(
        datetime.utcnow() - timedelta(days=1)
    ).not_valid_after(
        datetime.utcnow() + timedelta(days=3)
    ).add_extension(
        x509.BasicConstraints(ca=False, path_length=None),
        critical=True,
    ).add_extension(
        x509.ExtendedKeyUsage([auth]),
        critical=True,
    ).add_extension(
        x509.SubjectAlternativeName(subject_altnames),
        critical=True,
    ).sign(
        private_key=ca.key,
        algorithm=hashes.SHA512(),
        backend=default_backend()
    )
    return Cert(cert, key)


def main():
    """
    Main function
    """
    root_ca = generate_ca("root", pathlen=1)
    sub_ca = generate_ca("subca", root_ca, pathlen=0)
    write_certificate("cacerts", sub_ca.cert)
    write_certificate("cacerts", root_ca.cert, append=True)

    server = generate_cert("localhost", sub_ca, ip_v4="127.0.0.1", ip_v6="::1")
    write_private_key("client", server.key)
    write_certificate("client", server.cert)

    client = generate_cert("localhost", sub_ca, ip_v4="127.0.0.1", ip_v6="::1", client=True)
    write_private_key("server", client.key)
    write_certificate("server", client.cert)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        sys.exit(1)
