#!/usr/bin/env python3
"""
PKI for test
"""

import sys
from collections import namedtuple
from datetime import datetime, timedelta
from ipaddress import ip_address

from cryptography import x509
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes, serialization
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.x509.oid import NameOID

Cert = namedtuple("Cert", ["cert", "key"])


def get_key(key_size=4096):
    """
    Get random key
    """
    return rsa.generate_private_key(
        public_exponent=65537,
        key_size=key_size,
        backend=default_backend()
    )


def write_private_key(name, key, passphrase=None):
    """
    Write key, optionally encrypted with passphrase
    """
    if passphrase is not None:
        passphrase = bytes(passphrase, encoding="utf-8")
        algorithm = serialization.BestAvailableEncryption(passphrase)
    else:
        algorithm = serialization.NoEncryption()
    with open(f"{name}.key", "wb") as file:
        file.write(key.private_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PrivateFormat.TraditionalOpenSSL,
            encryption_algorithm=algorithm)
        )


def write_certificates(name, *certs):
    """
    Write certificate
    """
    with open(f"{name}.pem", "wb") as file:
        for cert in certs:
            file.write(cert.public_bytes(
                encoding=serialization.Encoding.PEM,
            ))


def generate_ca(
        name,
        ca=None,
        pathlen=0,
        not_before=datetime.utcnow() - timedelta(days=1),
        not_after=datetime.utcnow() + timedelta(days=3)):
    """
    Generate CA
    """
    subject = x509.Name([
        x509.NameAttribute(NameOID.COMMON_NAME, name),
    ])
    if ca is not None:
        issuer = ca.cert.subject
        ca_key = ca.key
        key = get_key()
    else:
        # Self-signed certificate
        key = ca_key = get_key()
        issuer = subject
    cert = x509.CertificateBuilder().subject_name(
        subject
    ).issuer_name(
        issuer
    ).public_key(
        key.public_key()
    ).serial_number(
        x509.random_serial_number()
    ).not_valid_before(
        not_before
    ).not_valid_after(
        not_after
    ).add_extension(
        x509.BasicConstraints(ca=True, path_length=pathlen),
        critical=True,
    ).add_extension(
        x509.KeyUsage(
            digital_signature=False,
            content_commitment=False,
            key_encipherment=False,
            data_encipherment=False,
            key_agreement=False,
            key_cert_sign=True,
            crl_sign=True,
            encipher_only=False,
            decipher_only=False,
        ),
        critical=True,
    ).add_extension(
        x509.SubjectKeyIdentifier.from_public_key(key.public_key()),
        critical=False,
    ).add_extension(
        x509.AuthorityKeyIdentifier.from_issuer_public_key(
            ca.key.public_key() if ca else key.public_key()
        ),
        critical=False,
    ).sign(
        private_key=ca_key,
        algorithm=hashes.SHA512(),
        backend=default_backend()
    )
    return Cert(cert, key)


def generate_pair(
        name,
        ca,
        alt_names=None,
        not_before=datetime.utcnow() - timedelta(days=1),
        not_after=datetime.utcnow() + timedelta(days=3),
        client=False):
    """
    Generate client/server key & certificate
    """
    if client:
        auth = x509.ExtendedKeyUsageOID.CLIENT_AUTH
    else:
        auth = x509.ExtendedKeyUsageOID.SERVER_AUTH
    subject = x509.Name([
        x509.NameAttribute(NameOID.COMMON_NAME, name),
    ])
    subject_altnames = [x509.DNSName(name)]
    if alt_names:
        for alt_name in alt_names:
            try:
                subject_altnames.append(x509.IPAddress(ip_address(alt_name)))
            except ValueError:
                subject_altnames.append(x509.DNSName(alt_name))
    key = get_key()
    cert = x509.CertificateBuilder().subject_name(
        subject
    ).issuer_name(
        ca.cert.subject
    ).public_key(
        key.public_key()
    ).serial_number(
        x509.random_serial_number()
    ).not_valid_before(
        not_before
    ).not_valid_after(
        not_after
    ).add_extension(
        x509.BasicConstraints(ca=False, path_length=None),
        critical=True,
    ).add_extension(
        x509.ExtendedKeyUsage([auth]),
        critical=True,
    ).add_extension(
        x509.SubjectAlternativeName(subject_altnames),
        critical=True,
    ).add_extension(
        x509.SubjectKeyIdentifier.from_public_key(key.public_key()),
        critical=False,
    ).add_extension(
        x509.AuthorityKeyIdentifier.from_issuer_public_key(ca.key.public_key()),
        critical=False,
    ).sign(
        private_key=ca.key,
        algorithm=hashes.SHA512(),
        backend=default_backend()
    )
    return Cert(cert, key)


def main():
    """
    Main function
    """
    root_ca = generate_ca("root", pathlen=1)
    sub_ca = generate_ca("subca", root_ca, pathlen=0)
    write_certificates("cacerts", sub_ca.cert, root_ca.cert)

    for host in ("client", "server"):
        alt_names = ("localhost", "127.0.0.1")
        pair = generate_pair(host, sub_ca, alt_names=alt_names, client=host == "client")
        write_private_key(host, pair.key)
        write_certificates(host, pair.cert)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        sys.exit(1)
